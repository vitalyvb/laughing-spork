---

- - defmacro
  - if
  - - lambda
    - - expr
      - then
      - else

    - - '&apply'
      - '&if'
      - - list
        - expr
        - - '&lambda'
          - []
          - then

        - - '&lambda'
          - []
          - else


- - defmacro
  - cond

  - - lambda
    - - expr
      - then
      - '&rest'
      - cont

    - - '&if'
      - - empty?
        - cont
      - - lambda
        - []

        - - callmacro
          - 'if'
          - - list
            - expr
            - then
            - null

      - - lambda
        - []

#        - - debug
#          - "EXPR:     "
#          - expr
#          - "CONT       "
#          - cont

        - - callmacro
          - 'if'
          - - list
            - expr
            - then
            - - callmacro
              - cond
              - cont

- - defmacro
  - defun
  - - lambda
    - - name
      - args
      - '&rest'
      - code

    - - eval
      - - '&apply'
        - define
        - - list
          - name
          - - '&lambda'
            - - '&apply.tolist'
              - args
            - - '&list.eval'
              - code

- - defun
  - test
  - - x
  - - cond
    - - eq?
      - x
      - 1
    - "one"

    - - eq?
      - x
      - 2
    - "two"

    - - eq?
      - x
      - 3
    - "three"

    - - eq?
      - x
      - 4
    - "four"

#  - 33

- - '&format'
  - test


- - debug
  - - test
    - 1

- - debug
  - - test
    - 2

- - debug
  - - test
    - 3

- - debug
  - - test
    - 4
